openapi: 3.0.3
info:
  title: RefMD API
  description: Real-time collaborative markdown editor API with CRDT support
  version: 1.1.0
  contact:
    name: RefMD Team
    email: support@refmd.io

servers:
  - url: http://localhost:8888/api
    description: Development server
  - url: https://api.refmd.io/api
    description: Production server

paths:
  # ===== Authentication =====
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      operationId: logout
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Logout successful
        '401':
          $ref: '#/components/responses/Unauthorized'

  # ===== Users =====
  /users/me:
    get:
      tags:
        - Users
      summary: Get current user
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # ===== Documents =====
  /documents:
    get:
      tags:
        - Documents
      summary: List user documents
      operationId: listDocuments
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: sort
          in: query
          description: Sort field
          schema:
            type: string
            enum: [created_at, updated_at, title]
            default: updated_at
        - name: order
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Documents retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Documents
      summary: Create a new document
      operationId: createDocument
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDocumentRequest'
      responses:
        '201':
          description: Document created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /documents/{id}:
    get:
      tags:
        - Documents
      summary: Get document by ID
      operationId: getDocument
      security:
        - bearerAuth: []
        - {}
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: token
          in: query
          description: Share token for accessing shared documents
          schema:
            type: string
      responses:
        '200':
          description: Document retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Documents
      summary: Update document
      operationId: updateDocument
      security:
        - bearerAuth: []
        - {}
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: token
          in: query
          description: Share token for updating shared documents
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDocumentRequest'
      responses:
        '200':
          description: Document updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Documents
      summary: Delete document
      operationId: deleteDocument
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Document deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /documents/{id}/content:
    get:
      tags:
        - Documents
      summary: Get document content
      description: Returns the current document content as markdown text
      operationId: getDocumentContent
      security:
        - bearerAuth: []
        - {}
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: token
          in: query
          description: Share token for accessing shared documents
          schema:
            type: string
      responses:
        '200':
          description: Document content retrieved successfully
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /documents/{id}/state:
    get:
      tags:
        - Documents
      summary: Get document CRDT state
      description: Returns the current CRDT state vector for synchronization
      operationId: getDocumentState
      security:
        - bearerAuth: []
        - {}
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: token
          in: query
          description: Share token for accessing shared documents
          schema:
            type: string
      responses:
        '200':
          description: State vector retrieved successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /documents/{id}/updates:
    post:
      tags:
        - Documents
      summary: Get document updates since timestamp
      description: Returns incremental CRDT updates since a given timestamp
      operationId: getDocumentUpdates
      security:
        - bearerAuth: []
        - {}
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: token
          in: query
          description: Share token for accessing shared documents
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                since:
                  type: integer
                  format: int64
                  description: Unix timestamp in milliseconds
              required:
                - since
      responses:
        '200':
          description: Updates retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  updates:
                    type: array
                    items:
                      type: string
                      format: base64
                  timestamp:
                    type: integer
                    format: int64
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /documents/{id}/download:
    get:
      tags:
        - Documents
      summary: Download document with attachments
      description: Downloads the document and all its attachments as a ZIP file
      operationId: downloadDocument
      security:
        - bearerAuth: []
        - {}
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: token
          in: query
          description: Share token for accessing shared documents
          schema:
            type: string
      responses:
        '200':
          description: ZIP file containing document and attachments
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # ===== Files =====
  /files:
    get:
      tags:
        - Files
      summary: List files for a document
      operationId: listFiles
      security:
        - bearerAuth: []
      parameters:
        - name: document_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Files retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/File'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /files/upload:
    post:
      tags:
        - Files
      summary: Upload file
      operationId: uploadFile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                document_id:
                  type: string
                  format: uuid
              required:
                - file
      responses:
        '201':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '413':
          description: File too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /files/{id}:
    get:
      tags:
        - Files
      summary: Download file
      operationId: downloadFile
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: File retrieved successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Files
      summary: Delete file
      operationId: deleteFile
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: File deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /files/documents/{filename}:
    get:
      tags:
        - Files
      summary: Download file by filename
      description: Download file by filename from document directory. Supports public access with share token.
      operationId: downloadFileByName
      security:
        - bearerAuth: []
        - {}
      parameters:
        - name: filename
          in: path
          required: true
          schema:
            type: string
        - name: document_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
        - name: token
          in: query
          description: Share token for accessing files in shared documents
          schema:
            type: string
      responses:
        '200':
          description: File retrieved successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # ===== Sharing =====
  /shares/documents/{id}/share:
    post:
      tags:
        - Sharing
      summary: Create share link
      operationId: shareDocument
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShareDocumentRequest'
      responses:
        '201':
          description: Share created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShareResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /shares/documents/{id}/shares:
    get:
      tags:
        - Sharing
      summary: List document shares
      operationId: listDocumentShares
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Shares retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Share'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /shares/{token}:
    get:
      tags:
        - Sharing
      summary: Get shared document
      operationId: getSharedDocument
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Shared document retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedDocument'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Sharing
      summary: Delete share
      operationId: deleteShare
      security:
        - bearerAuth: []
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Share deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # ===== Git Sync =====
  /git/config:
    post:
      tags:
        - Git Sync
      summary: Create or update Git configuration
      operationId: createOrUpdateGitConfig
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGitConfigRequest'
      responses:
        '200':
          description: Git configuration created or updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitConfigResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

    get:
      tags:
        - Git Sync
      summary: Get Git configuration
      operationId: getGitConfig
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Git configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitConfigResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Git Sync
      summary: Delete Git configuration
      operationId: deleteGitConfig
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Git configuration deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /git/init:
    post:
      tags:
        - Git Sync
      summary: Initialize Git repository
      operationId: initGitRepository
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Repository initialized successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /git/sync:
    post:
      tags:
        - Git Sync
      summary: Manual sync
      operationId: manualGitSync
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Sync completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitSyncResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /git/status:
    get:
      tags:
        - Git Sync
      summary: Get Git status
      operationId: getGitStatus
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Git status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitStatus'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /git/logs:
    get:
      tags:
        - Git Sync
      summary: Get sync logs
      operationId: getGitSyncLogs
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Sync logs retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GitSyncLogResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /git/diff/files/{file_path}:
    get:
      tags:
        - Git Sync
      summary: Get file diff
      description: Get uncommitted changes for a specific file
      operationId: getFileDiff
      security:
        - bearerAuth: []
      parameters:
        - name: file_path
          in: path
          required: true
          schema:
            type: string
          description: Path to the file relative to the repository root
      responses:
        '200':
          description: File diff retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiffResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /git/diff/commits/{from}/{to}:
    get:
      tags:
        - Git Sync
      summary: Get commit diff
      description: Get diff between two commits
      operationId: getCommitDiff
      security:
        - bearerAuth: []
      parameters:
        - name: from
          in: path
          required: true
          schema:
            type: string
          description: From commit hash
        - name: to
          in: path
          required: true
          schema:
            type: string
          description: To commit hash
      responses:
        '200':
          description: Commit diff retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiffResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /git/diff/staged:
    get:
      tags:
        - Git Sync
      summary: Get staged diff
      description: Get diff of staged changes
      operationId: getStagedDiff
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Staged diff retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiffResult'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /git/diff/working:
    get:
      tags:
        - Git Sync
      summary: Get working directory diff
      description: Get diff of working directory changes
      operationId: getWorkingDiff
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Working directory diff retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiffResult'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /git/pull:
    post:
      tags:
        - Git Sync
      summary: Pull from remote
      description: Pull changes from remote repository
      operationId: pullFromRemote
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Pull completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  has_conflicts:
                    type: boolean
                  conflicts:
                    $ref: '#/components/schemas/ConflictInfo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /git/conflicts:
    get:
      tags:
        - Git Sync
      summary: Get conflicts
      description: Get current merge conflicts
      operationId: getConflicts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Conflicts retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictInfo'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /git/conflicts/resolve:
    post:
      tags:
        - Git Sync
      summary: Resolve conflict
      description: Resolve a merge conflict for a specific file
      operationId: resolveConflict
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergeResolution'
      responses:
        '200':
          description: Conflict resolved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /git/conflicts/abort:
    post:
      tags:
        - Git Sync
      summary: Abort merge
      description: Abort the current merge operation
      operationId: abortMerge
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Merge aborted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /git/gitignore:
    post:
      tags:
        - Git Sync
      summary: Create default gitignore
      description: Create a default .gitignore file
      operationId: createGitignore
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Gitignore created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /git/gitignore/patterns:
    get:
      tags:
        - Git Sync
      summary: Get gitignore patterns
      description: Get current .gitignore patterns
      operationId: getGitignorePatterns
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Patterns retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  patterns:
                    type: array
                    items:
                      type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      tags:
        - Git Sync
      summary: Add gitignore patterns
      description: Add patterns to .gitignore
      operationId: addGitignorePatterns
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - patterns
              properties:
                patterns:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Patterns added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /git/gitignore/check:
    post:
      tags:
        - Git Sync
      summary: Check if path is ignored
      description: Check if a path is ignored by .gitignore
      operationId: checkPathIgnored
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - path
              properties:
                path:
                  type: string
      responses:
        '200':
          description: Check completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  path:
                    type: string
                  is_ignored:
                    type: boolean
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # ===== Socket.IO Stats =====
  /socketio/documents/{id}/active-users:
    get:
      tags:
        - Socket.IO
      summary: Get active users
      description: Get list of users currently viewing or editing the document
      operationId: getActiveUsers
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Active users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        user_id:
                          type: string
                          format: uuid
                        name:
                          type: string
                        email:
                          type: string
                          format: email
                        cursor_position:
                          type: integer
                          nullable: true
                        selection:
                          type: object
                          nullable: true
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /socketio/documents/{id}/stats:
    get:
      tags:
        - Socket.IO
      summary: Get document statistics
      description: Get real-time statistics about the document
      operationId: getDocumentStats
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      active_users:
                        type: integer
                      total_edits:
                        type: integer
                      last_modified:
                        type: string
                        format: date-time
                      version:
                        type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /scraps:
    post:
      tags:
        - Scraps
      summary: Create a new scrap
      operationId: createScrap
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateScrapRequest'
      responses:
        '201':
          description: Scrap created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scrap'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'

    get:
      tags:
        - Scraps
      summary: Get user's scraps
      operationId: getScraps
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of scraps
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Scrap'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /scraps/{id}:
    get:
      tags:
        - Scraps
      summary: Get scrap with posts
      operationId: getScrap
      security:
        - bearerAuth: []
        - {}
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: token
          in: query
          required: false
          schema:
            type: string
          description: Share token for accessing the scrap
      responses:
        '200':
          description: Scrap with posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScrapWithPosts'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Scraps
      summary: Update scrap
      operationId: updateScrap
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateScrapRequest'
      responses:
        '200':
          description: Scrap updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scrap'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Scraps
      summary: Delete scrap
      operationId: deleteScrap
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Scrap deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /scraps/{id}/share:
    post:
      tags:
        - Scraps
      summary: Create share link for scrap
      operationId: createScrapShare
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShareDocumentRequest'
      responses:
        '201':
          description: Share link created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ShareResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /scraps/{id}/shares:
    get:
      tags:
        - Scraps
      summary: List share links for scrap
      operationId: listScrapShares
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of share links
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        token:
                          type: string
                        document_id:
                          type: string
                          format: uuid
                        permission_level:
                          type: string
                        created_by:
                          type: string
                          format: uuid
                        expires_at:
                          type: string
                          format: date-time
                          nullable: true
                        created_at:
                          type: string
                          format: date-time
                        url:
                          type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /scraps/shares/{token}:
    delete:
      tags:
        - Scraps
      summary: Delete scrap share link
      operationId: deleteScrapShare
      security:
        - bearerAuth: []
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Share link deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /scraps/{id}/posts:
    get:
      tags:
        - Scraps
      summary: Get scrap posts
      operationId: getScrapPosts
      security:
        - bearerAuth: []
        - {}
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: token
          in: query
          required: false
          schema:
            type: string
          description: Share token for accessing the scrap posts
      responses:
        '200':
          description: List of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScrapPost'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      tags:
        - Scraps
      summary: Add post to scrap
      operationId: createScrapPost
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateScrapPostRequest'
      responses:
        '201':
          description: Post created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScrapPost'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /scraps/{id}/posts/{postId}:
    put:
      tags:
        - Scraps
      summary: Update scrap post
      operationId: updateScrapPost
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: postId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateScrapPostRequest'
      responses:
        '200':
          description: Post updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScrapPost'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Scraps
      summary: Delete scrap post
      operationId: deleteScrapPost
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: postId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Post deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # ===== Authentication =====
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        name:
          type: string
          minLength: 2
      required:
        - email
        - password
        - name

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - email
        - password

    RefreshTokenRequest:
      type: object
      properties:
        refresh_token:
          type: string
      required:
        - refresh_token

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        user:
          $ref: '#/components/schemas/User'

    # ===== User =====
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    # ===== Document =====
    Document:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        content:
          type: string
          description: Document content (only included in certain endpoints)
        type:
          type: string
          enum: [document, folder, scrap]
        parent_id:
          type: string
          format: uuid
          nullable: true
        file_path:
          type: string
          nullable: true
          description: File system path for the document
        owner_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateDocumentRequest:
      type: object
      properties:
        title:
          type: string
          maxLength: 255
        content:
          type: string
          default: ""
        type:
          type: string
          enum: [document, folder, scrap]
          default: document
        parent_id:
          type: string
          format: uuid
          nullable: true
      required:
        - title

    UpdateDocumentRequest:
      type: object
      properties:
        title:
          type: string
          maxLength: 255
        content:
          type: string
        parent_id:
          type: string
          format: uuid
          nullable: true

    DocumentContent:
      type: object
      properties:
        content:
          type: string
          description: Current markdown content
        version:
          type: integer
          format: int64
        updated_at:
          type: string
          format: date-time

    DocumentListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Document'
        meta:
          type: object
          properties:
            page:
              type: integer
            limit:
              type: integer
            total:
              type: integer
            total_pages:
              type: integer

    # ===== File =====
    File:
      type: object
      properties:
        id:
          type: string
          format: uuid
        filename:
          type: string
        file_size:
          type: integer
          format: int64
        mime_type:
          type: string
        document_id:
          type: string
          format: uuid
          nullable: true
        user_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time

    FileResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: string
              format: uuid
            filename:
              type: string
            size:
              type: integer
            mime_type:
              type: string
            url:
              type: string

    # ===== Sharing =====
    ShareDocumentRequest:
      type: object
      properties:
        permission:
          type: string
          enum: [view, edit]
        expires_at:
          type: string
          format: date-time
          nullable: true
      required:
        - permission

    ShareResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            token:
              type: string
            url:
              type: string
            expires_at:
              type: string
              format: date-time
              nullable: true

    Share:
      type: object
      properties:
        id:
          type: string
          format: uuid
        document_id:
          type: string
          format: uuid
        token:
          type: string
        permission:
          type: string
          enum: [view, edit]
        created_by:
          type: string
          format: uuid
        expires_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time

    SharedDocument:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        content:
          type: string
        permission:
          type: string
          enum: [view, edit]

    # ===== Git Sync =====
    CreateGitConfigRequest:
      type: object
      required:
        - repository_url
        - auth_type
        - auth_data
      properties:
        repository_url:
          type: string
          description: Git repository URL
          example: "https://github.com/user/repo.git"
        branch_name:
          type: string
          description: Branch name to sync with
          default: "main"
          example: "main"
        auth_type:
          type: string
          enum: [ssh, token]
          description: Authentication type
          example: "token"
        auth_data:
          type: object
          description: Authentication data (SSH private key or token)
          example: { "token": "ghp_xxxxxxxxxxxxxxxxxxxx" }
        auto_sync:
          type: boolean
          description: Enable automatic sync on document save
          default: true

    GitConfigResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        repository_url:
          type: string
        branch_name:
          type: string
        auth_type:
          type: string
          enum: [ssh, token]
        auto_sync:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    GitSyncResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        commit_hash:
          type: string
          nullable: true
        files_changed:
          type: integer
          format: int32

    GitStatus:
      type: object
      properties:
        repository_initialized:
          type: boolean
        has_remote:
          type: boolean
        current_branch:
          type: string
          nullable: true
        uncommitted_changes:
          type: integer
          format: int32
        untracked_files:
          type: integer
          format: int32
        last_sync:
          type: string
          format: date-time
          nullable: true
        sync_enabled:
          type: boolean

    GitSyncLogResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        operation:
          type: string
          enum: [init, commit, push, pull]
        status:
          type: string
          enum: [success, error]
        message:
          type: string
          nullable: true
        commit_hash:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time

    DiffResult:
      type: object
      properties:
        file_path:
          type: string
          description: Path to the file being diffed
        diff_lines:
          type: array
          items:
            $ref: '#/components/schemas/DiffLine'
        old_content:
          type: string
          nullable: true
          description: Original file content (optional)
        new_content:
          type: string
          nullable: true
          description: New file content (optional)

    DiffLine:
      type: object
      properties:
        line_type:
          type: string
          enum: [added, deleted, context]
          description: Type of change for this line
        old_line_number:
          type: integer
          nullable: true
          description: Line number in the original file
        new_line_number:
          type: integer
          nullable: true
          description: Line number in the new file
        content:
          type: string
          description: The actual line content

    ConflictInfo:
      type: object
      properties:
        has_conflicts:
          type: boolean
          description: Whether there are any conflicts
        conflicted_files:
          type: array
          items:
            $ref: '#/components/schemas/ConflictedFile'
        can_auto_merge:
          type: boolean
          description: Whether conflicts can be auto-merged
        merge_message:
          type: string
          nullable: true
          description: Message about the merge status

    ConflictedFile:
      type: object
      properties:
        file_path:
          type: string
          description: Path to the conflicted file
        conflict_type:
          type: string
          enum: [both_modified, both_added, deleted_by_us, deleted_by_them, unknown]
          description: Type of conflict
        our_version:
          type: string
          nullable: true
          description: Our version of the file content
        their_version:
          type: string
          nullable: true
          description: Their version of the file content
        base_version:
          type: string
          nullable: true
          description: Base version of the file content
        markers:
          type: array
          items:
            $ref: '#/components/schemas/ConflictMarker'

    ConflictMarker:
      type: object
      properties:
        start_line:
          type: integer
          description: Line number where conflict starts
        middle_line:
          type: integer
          description: Line number of the separator
        end_line:
          type: integer
          description: Line number where conflict ends
        our_content:
          type: array
          items:
            type: string
          description: Our version content lines
        their_content:
          type: array
          items:
            type: string
          description: Their version content lines

    MergeResolution:
      type: object
      required:
        - file_path
        - resolution_type
      properties:
        file_path:
          type: string
          description: Path to the file to resolve
        resolution_type:
          type: string
          enum: [use_ours, use_theirs, manual, delete]
          description: How to resolve the conflict
        resolved_content:
          type: string
          nullable: true
          description: Manual resolution content (required if resolution_type is manual)

    # ===== Error =====
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: array
              items:
                type: object

    Scrap:
      type: object
      required:
        - id
        - owner_id
        - title
        - created_at
        - updated_at
      properties:
        id:
          type: string
          format: uuid
        owner_id:
          type: string
          format: uuid
        title:
          type: string
        file_path:
          type: string
          nullable: true
        parent_id:
          type: string
          format: uuid
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        last_edited_by:
          type: string
          format: uuid
          nullable: true
        last_edited_at:
          type: string
          format: date-time
          nullable: true

    ScrapPost:
      type: object
      required:
        - id
        - author_id
        - content
        - created_at
        - updated_at
      properties:
        id:
          type: string
          format: uuid
        author_id:
          type: string
          format: uuid
        author_name:
          type: string
          nullable: true
        content:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ScrapWithPosts:
      type: object
      required:
        - scrap
        - posts
      properties:
        scrap:
          $ref: '#/components/schemas/Scrap'
        posts:
          type: array
          items:
            $ref: '#/components/schemas/ScrapPost'

    CreateScrapRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
        parent_id:
          type: string
          format: uuid
          nullable: true

    UpdateScrapRequest:
      type: object
      properties:
        title:
          type: string

    CreateScrapPostRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string

    UpdateScrapPostRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

tags:
  - name: Authentication
    description: User authentication endpoints
  - name: Users
    description: User management endpoints
  - name: Documents
    description: Document management and CRDT synchronization
  - name: Files
    description: File attachment management
  - name: Sharing
    description: Document sharing functionality
  - name: Socket.IO
    description: Real-time collaboration statistics
  - name: Scraps
    description: Scrap (thread-based memo) management